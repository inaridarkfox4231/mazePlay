// 未確定マスで、上下左右を見たとき、1のマスがあるものを考える（他はとりあえずスルー）
// その1のマスの上下左右を見て0が2つ以上あったらその1のマスは0にできない。
// 0が1つもない場合も。1つだけの時、そこを割る（0にする）。そして、未確定マスから作った迷路をそこでつなげる感じ。
// で、valueもちゃんと計算。そのうえで、割った先の0マスのvalueに対し、壊した壁のvalueをそれ+1にして、そこから先の
// マスのvalueもそれ+2をすべて加えて再計算する感じかなぁ。
// ていうかvalueの初期値を+2にすればいいんでしょ・・createMazeにvalueの初期値の情報を加えましょう。デフォルトは0で。
// createPath(3, 3, 0)から始める。createMaze(3, 3)はcreatePath(3, 3, 0)から始める。
// そして-1が残ったら、そこを走査して、上下左右で1マスがある-1マスのうち、それらの1マスの中に上下左右で
// 0マスがひとつだけのものがあるものを探す。あればその0マスのvalueに対して1マスのvalueを+1とし、
// originの-1マスを(x, y)としてcreateMaze(x, y, v + 2)する。んー・・

// 詳細
// restマスで、その上下左右の1マスのうち、上下左右の0マスがひとつしかないもの、が、あるもの、を、探す。
// すべてのrestマスが条件を満たさないならrestマスをすべて1にしてbreak.
// あるならうち一つを選び、該当する1マスを0にしてvalueを隣接0マスのvalueをv_0としてv_0+1に設定
// そしてもとのrestマスに対しcreatePath(マス.x, マス.y, v_0+2)を実行する。
// そして次のループに移る。

// うまくいった・・？？のか？？
// 失敗。また明日。

// isZero > 1に戻したらうまくいった。自分を信じないとだめだね。
